!function(e){var t={};function n(a){if(t[a])return t[a].exports;var l=t[a]={i:a,l:!1,exports:{}};return e[a].call(l.exports,l,l.exports,n),l.l=!0,l.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var l in e)n.d(a,l,function(t){return e[t]}.bind(null,l));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){},function(e,t,n){"use strict";n.r(t);n(0),n.p,n.p,n.p,n.p;const a=document.getElementById("login"),l=document.getElementById("logout"),o=document.getElementById("login-user"),r=document.getElementById("img-avatar"),i={apiKey:"AIzaSyDGTo41PYmovSD_uhkJTLMxEvmoutkmdzw",authDomain:"piskel-9234c.firebaseapp.com",databaseURL:"https://piskel-9234c.firebaseio.com",projectId:"piskel-9234c",storageBucket:"piskel-9234c.appspot.com",messagingSenderId:"967280018893",appId:"1:967280018893:web:f0d89886e2745518a7f084"};function c(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]}a.addEventListener("click",(function(){const e=new firebase.auth.GoogleAuthProvider;firebase.auth().signInWithPopup(e).then(()=>{const e=firebase.auth().currentUser;null!=e&&e.providerData.forEach(e=>{o.innerText=e.displayName,r.src=e.photoURL,r.hidden=!1,o.hidden=!1,a.hidden=!0,l.hidden=!1})}).catch(e=>{console.log(e)})})),l.addEventListener("click",(function(){firebase.auth().signOut().then(()=>{l.hidden=!0,r.hidden=!0,o.hidden=!0,r.src="",o.innerText="",a.hidden=!1}).catch(e=>{console.log(e)})}));const s=document.getElementById("select-color-canvas"),d=document.getElementById("color-prev"),u=document.getElementById("color-red"),g=document.getElementById("color-blue");function m(e){d.style.backgroundColor=s.style.backgroundColor,s.value=e,s.style.backgroundColor=e}function f(){return s.value}function h(){d.style.backgroundColor=s.style.backgroundColor,s.style.backgroundColor=s.value}function v(){return document.querySelector("input[name=size-pencil]:checked").value}function p(e,t,n,a){const l=n-e,o=a-t,r=Math.abs(l),i=Math.abs(o);let c,s,d,u,g=2*i-r,m=2*r-i;if(i<=r){l>=0?(c=e,s=t,d=n):(c=n,s=a,d=e),q(c,s);for(let e=0;c<d;e+=1)c+=1,g<0?g+=2*i:(l<0&&o<0||l>0&&o>0?s+=1:s-=1,g+=2*(i-r)),q(c,s)}else{o>=0?(c=e,s=t,u=a):(c=n,s=a,u=t),q(c,s);for(let e=0;s<u;e+=1)s+=1,m<=0?m+=2*r:(l<0&&o<0||l>0&&o>0?c+=1:c-=1,m+=2*(r-i)),q(c,s)}}function y(e){return e.insertAdjacentHTML("beforeend",'<li class="list-frames-item">\n    <canvas class="small-canvas" width="100" height="100"></canvas>\n    <button class="btn-frame delete-frame" id="btn-delete-frame">\n      <i class="fas fa-trash"></i>\n    </button>\n    <button class="btn-frame clone-frame" id="btn-clone-frame">\n      <i class="fas fa-clone"></i>\n    </button>\n  </li>')}d.style.backgroundColor="#008000",s.style.backgroundColor="#008000",s.onchange=h,d.addEventListener("click",()=>{s.value=function(e){let t=Number(e.match(/\d{1,3}/gi)[0]).toString(16),n=Number(e.match(/\d{1,3}/gi)[1]).toString(16),a=Number(e.match(/\d{1,3}/gi)[2]).toString(16);return 1===t.length&&(t=`0${t}`),1===n.length&&(n=`0${n}`),1===a.length&&(a=`0${a}`),`#${t}${n}${a}`}(d.style.backgroundColor),s.style.backgroundColor=d.style.backgroundColor}),u.addEventListener("click",()=>{s.value="#ff0000",h()}),g.addEventListener("click",()=>{s.value="#0000ff",h()});const I=document.getElementById("list-tools");function b(e){const t={KeyP:"pencil",KeyB:"fill",KeyC:"choose",KeyL:"line",KeyE:"eraser"},n=Array.from(I.children).find(n=>n.id===t[e.code]);n&&(I.querySelector(".selected").classList.remove("selected"),n.classList.add("selected"))}function E(){return I.querySelector(".selected").id}document.addEventListener("keydown",e=>b(e)),I.addEventListener("click",e=>{return(t=e).preventDefault(),t.currentTarget.querySelector(".selected").classList.remove("selected"),void t.target.closest("li").classList.add("selected");var t});let w,L=[],S="none",k="512",C=!1,B=[],x="Minsk";const R=document.getElementById("canvas"),D=R.getContext("2d"),$=document.getElementById("image-resizing-text"),M=document.getElementById("btn-frames"),F=document.getElementById("list-frames"),O=document.getElementById("image-resizing"),P=document.getElementById("select-location");function T(){return B}function q(e,t){const n={x:0,y:0},a=v(),l=R.getBoundingClientRect(),o=(e-l.left)/(512/k),r=(t-l.top)/(512/k),i=Math.floor(o/a),c=Math.floor(r/a);n.x=i*a,n.y=c*a,D.lineTo(n.x,n.y),D.fillRect(n.x,n.y,a,a)}function z(e){R.width=e,R.height=e}function j(e){const t=R.getBoundingClientRect(),n=(e.clientX-t.left)/(512/k);return Math.floor(n/v())*v()}function A(e){const t=R.getBoundingClientRect(),n=(e.clientY-t.top)/(512/k);return Math.floor(n/v())*v()}function W(e){D.clearRect(0,0,512,512),D.fillStyle=e,D.fillRect(0,0,512,512),_()}function H(e,t,n){if(t<0||n<0||t>=e.width||n>=e.height)return[-1,-1,-1,-1];const a=4*(n*e.width+t);return e.data.slice(a,a+4)}function U(e,t,n,a){const l=4*(n*e.width+t),o=e;for(let e=0;e<3;e+=1)o.data[l+e]=a[e]}function _(){const e=R.toDataURL(),t=S.children[0].getContext("2d"),n=new Image;n.src=e,n.onload=()=>{t.drawImage(n,0,0,100,100)};const a=Array.from(F.children).findIndex(e=>e.classList.contains("active-frame"));B[a]=e}O.value=k,P.value=x,P.addEventListener("focus",()=>{document.removeEventListener("keydown",b)}),P.addEventListener("blur",()=>{document.addEventListener("keydown",b)}),document.getElementById("clear-canvas").addEventListener("click",()=>W("rgb(224, 224, 224)")),document.getElementById("full-fill-canvas").addEventListener("click",()=>W(f())),O.addEventListener("input",()=>{const e=R.toDataURL();k=O.value,z(k),$.textContent=`Image resizing ${k}px`;const t=new Image;t.crossOrigin="anonymous",t.src=e,t.onload=function(){let e=0,n=0,a=0,l=0;this.naturalWidth>=this.naturalHeight&&(l=this.naturalHeight*R.width/this.naturalWidth,n=(R.height-l)/2,a=R.width),this.naturalHeight>this.naturalWidth&&(a=this.naturalWidth*R.height/this.naturalHeight,e=(R.width-a)/2,l=R.height),D.imageSmoothingEnabled=!1,D.drawImage(t,e,n,a,l),_()}}),P.addEventListener("input",()=>{x=P.value}),R.addEventListener("mousedown",e=>{const t=E();"pencil"!==t&&"eraser"!==t||("pencil"===t&&(D.fillStyle=f()),"eraser"===t&&(D.fillStyle="rgb(224, 224, 224)"),C=!0,D.beginPath(),D.moveTo(j(e),A(e)),D.fillRect(j(e),A(e),v(),v())),"line"===t&&(C=!0,D.beginPath(),D.lineWidth=v(),D.strokeStyle=f(),D.moveTo(j(e),A(e)))}),R.addEventListener("mousemove",e=>{const t=E();"pencil"!==t&&"eraser"!==t||!0!==C||(L.push([e.clientX,e.clientY]),function(e){for(let t=0;t<e.length-1;t+=1)p(e[t][0],e[t][1],e[t+1][0],e[t+1][1])}(L))}),R.addEventListener("mouseup",e=>{const t=E();"pencil"!==t&&"eraser"!==t||(L=[],D.closePath(),C=!1),"line"===t&&(D.lineTo(j(e),A(e)),D.stroke(),D.closePath(),C=!1),_()}),R.addEventListener("click",e=>{const t=E();if("fill"===t){const t=R.getBoundingClientRect(),n=Math.floor((e.clientX-t.left)/(512/k)),a=Math.floor((e.clientY-t.top)/(512/k)),l=function(e){const t=[];if("#"===e.substring(0,1)){const n=e.substring(1);t.push(parseInt(n.substring(0,2),16)),t.push(parseInt(n.substring(2,4),16)),t.push(parseInt(n.substring(4),16)),t.push(255)}return t}(f()),o=D.getImageData(n,a,1,1);let r=0;for(let e=0;e<l.length;e+=1)if(o.data[e]===l[e]&&(r+=1,4===r))return;!function(e,t,n){const a=D.getImageData(0,0,D.canvas.width,D.canvas.height),l=H(a,e,t);if(!c(l,n)){const o=[e,t];for(;o.length>0;){const e=o.pop(),t=o.pop();c(H(a,t,e),l)&&(U(a,t,e,n),o.push(t+1,e),o.push(t-1,e),o.push(t,e+1),o.push(t,e-1))}D.putImageData(a,0,0)}}(n,a,l)}if("choose"===t){const t=R.getBoundingClientRect(),n=(e.clientX-t.left)/(512/k),a=(e.clientY-t.top)/(512/k);m(function(e){let t=e[0].toString(16),n=e[1].toString(16),a=e[2].toString(16);return 1===t.length&&(t=`0${t}`),1===n.length&&(n=`0${n}`),1===a.length&&(a=`0${a}`),`#${t}${n}${a}`}(D.getImageData(n,a,1,1).data))}_()}),document.getElementById("load-img").addEventListener("click",async()=>{const e=`https://api.unsplash.com/photos/random?query=town,${x}&client_id=`+"7ecf2c24d5d034741fef228be12d923381e2468cf13c79ee3b5236b81f3f5220";let t;try{const n=await fetch(e);t=await n.json()}catch(e){throw new Error(e)}W("rgb(224, 224, 224)");const n=new Image;n.crossOrigin="anonymous",n.src=t.urls.small,n.onload=function(){let e=0,t=0,a=0,l=0;this.naturalWidth>=this.naturalHeight&&(l=this.naturalHeight*R.width/this.naturalWidth,t=(R.height-l)/2,a=R.width),this.naturalHeight>this.naturalWidth&&(a=this.naturalWidth*R.height/this.naturalHeight,e=(R.width-a)/2,l=R.height),D.imageSmoothingEnabled=!1,D.drawImage(n,e,t,a,l),_()}}),document.getElementById("bw-img").addEventListener("click",()=>{const e=D.getImageData(0,0,R.width,R.height),t=D.createImageData(R.width,R.height),n=e.data,a=t.data,l=new Image;let o;for(let e=0;e<n.length;e+=4)o=.2126*n[e]+.7152*n[e+1]+.0722*n[e+2],a[e]=o,a[e+1]=o,a[e+2]=o,a[e+3]=n[e+3];l.crossOrigin="anonymous",D.putImageData(t,0,0),l.src=R.toDataURL(),D.drawImage(l,0,0,R.width,R.height),_()}),M.addEventListener("click",e=>{e.preventDefault(),S.classList.remove("active-frame"),y(F),S=F.lastElementChild,S.classList.add("active-frame"),D.fillStyle="rgb(224, 224, 224)",D.fillRect(0,0,512,512),B.splice(B.length,0,R.toDataURL())}),F.addEventListener("click",e=>{if(e.preventDefault(),e.target.closest("button[class*=delete]")){const t=Array.from(F.children).findIndex(t=>t===e.target.closest("li"));e.target.closest("li").remove(),B.splice(t,1)}else if(e.target.closest("button[class*=clone]")){S.classList.remove("active-frame"),S=e.target.closest("li"),S.classList.add("active-frame");const t=Array.from(F.children).findIndex(e=>e.classList.contains("active-frame"));F.insertBefore(e.target.closest("li").cloneNode(!0),e.target.closest("li").nextElementSibling);const n=S.nextElementSibling;S.classList.remove("active-frame");const a=n.children[0].getContext("2d"),l=new Image;l.src=B[t],l.onload=()=>{a.drawImage(l,0,0,100,100),D.drawImage(l,0,0),B.splice(t,0,R.toDataURL())},S=n}else{S.classList.remove("active-frame"),S=e.target.closest("li"),S.classList.add("active-frame");const t=Array.from(F.children).findIndex(e=>e.classList.contains("active-frame"));if(B[t]){const e=new Image;e.src=B[t],e.onload=()=>{D.drawImage(e,0,0)}}}});const N=document.getElementById("anim-canvas");let K=0;function Y(e){const t=document.getElementById("anim-canvas").getContext("2d"),n=new Image;t.clearRect(0,0,200,200),K>=e.length&&(K=0),e[K]&&(n.src=e[K],n.onload=()=>{t.drawImage(n,0,0,200,200)},K+=1)}N.addEventListener("click",(function(){if(("fullscreenEnabled"in document||"webkitFullscreenEnabled"in document)&&(document.fullscreenEnabled||document.webkitFullscreenEnabled)){const e=document.getElementById("anim-canvas");"requestFullscreen"in e?e.requestFullscreen():"webkitRequestFullscreen"in e&&e.webkitRequestFullscreen()}}));const X=document.getElementById("btn-open-piskel"),J=document.getElementById("wrapper-landing"),G=document.getElementById("wrapper-piskel");function Q(e){e&&(J.style.display="none",G.style.display="block")}X.addEventListener("click",e=>Q(e));const V=document.getElementById("anim-fps"),Z=document.getElementById("label-anim");let ee=1,te=setInterval(()=>Y(T()),1e3/ee);!function(){localStorage.getItem("sizeCanvas")&&(e=localStorage.getItem("sizeCanvas"),k=e,z(k),O.value=k,$.textContent=`Image resizing ${k}px`);var e;localStorage.getItem("allCanvasFrame")&&(t=JSON.parse(localStorage.getItem("allCanvasFrame")),B=t);var t;localStorage.getItem("currentCity")&&function(e){x=e,P.value=e}(localStorage.getItem("currentCity"));localStorage.getItem("currentColor")&&m(localStorage.getItem("currentColor"));localStorage.getItem("currentIndexFrame")&&function(e){w=e,B.length||(y(F),S=F.firstElementChild,S.classList.add("active-frame"),D.fillStyle="rgb(224, 224, 224)",D.fillRect(0,0,512,512));for(let e=0;e<B.length;e+=1)if(y(F),F.children[e]){const t=F.children[e].children[0].getContext("2d"),n=new Image;n.src=B[e],n.onload=()=>t.drawImage(n,0,0,100,100)}S=w>=0?F.children[w]:F.firstElementChild,S.classList.add("active-frame");let t=0;if(w>0&&(t=w),B[t]){const e=B[t],n=new Image;n.src=e,n.onload=()=>D.drawImage(n,0,0)}}(localStorage.getItem("currentIndexFrame"))}(),Q(localStorage.getItem("currentIndexFrame")),function(){if(!I.querySelector(".selected")){I.querySelector(".pencil").classList.add("selected")}}(),firebase.initializeApp(i),V.addEventListener("input",()=>{clearInterval(te),ee=V.value,Z.textContent=`${ee} fps`,te=setInterval(()=>Y(T()),1e3/ee)}),window.onbeforeunload=()=>{localStorage.setItem("allCanvasFrame",JSON.stringify(T())),localStorage.setItem("currentColor",f()),localStorage.setItem("currentIndexFrame",Array.from(F.children).findIndex(e=>e.classList.contains("active-frame"))),localStorage.setItem("currentCity",x),localStorage.setItem("sizeCanvas",k)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,